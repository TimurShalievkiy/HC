using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class ShapesManager : MonoBehaviour
{
    //получить фигуру по Id с заданием родительского обьекта
    public static GameObject GetShapeById(int id,Transform parent)
    {
        //получаем заготовку фигуры
        GameObject instance = Instantiate(Resources.Load("FullShape", typeof(GameObject)), parent.position, Quaternion.identity) as GameObject;
        //назначаем родительский обьект
        instance.transform.parent = parent;
        //выставляем скейл в базовое значение
        instance.transform.localScale = new Vector3(1, 1, 1);

        //получаем фигуру из списка по айди
        int[,] shape = GetAllShapes()[id];

        //убираем лишние блоки в зависимости от значенией фигуры
        for (int i = 0; i < shape.GetLength(0); i++)
        {
            for (int j = 0; j < shape.GetLength(1); j++)
            {
                if (shape[i, j] == 1)
                {
                    instance.transform.GetChild(i * shape.GetLength(0) + j).GetComponent<Image>().enabled = true;
                }
                else
                    instance.transform.GetChild(i * shape.GetLength(0) + j).GetComponent<Image>().enabled = false;
            }
           
        }
        //возвращаем готовую фигуру
        return instance;

    }

    //получение списка всех фигур в виде двумерных масивов
    public static List<int[,]> GetAllShapes()
    {
        List<int[,]> lsh = new List<int[,]>();

        //1
        lsh.Add(new int[,] { { 0,0,0,0,0},
                             { 0,0,0,0,0},
                             { 0,0,1,0,0},
                             { 0,0,0,0,0},
                             { 0,0,0,0,0} });
        //2
        lsh.Add(new int[,] { { 0,0,0,0,0},
                             { 0,0,0,0,0},
                             { 0,1,1,0,0},
                             { 0,0,0,0,0},
                             { 0,0,0,0,0} });
        //3
        lsh.Add(new int[,] { { 0,0,0,0,0},
                             { 0,0,0,0,0},
                             { 0,1,1,1,0},
                             { 0,0,0,0,0},
                             { 0,0,0,0,0} });
        //4
        lsh.Add(new int[,] { { 0,0,0,0,0},
                             { 0,0,1,0,0},
                             { 0,0,1,0,0},
                             { 0,0,1,0,0},
                             { 0,0,0,0,0} });
        //5
        lsh.Add(new int[,] { { 0,0,0,0,0},
                             { 0,0,0,0,0},
                             { 0,0,1,1,0},
                             { 0,0,1,1,0},
                             { 0,0,0,0,0} });
        //6
        lsh.Add(new int[,] { { 0,0,0,0,0},
                             { 0,1,0,0,0},
                             { 0,1,0,0,0},
                             { 0,1,1,1,0},
                             { 0,0,0,0,0} });
        //7
        lsh.Add(new int[,] { { 0,0,0,0,0},
                             { 0,1,1,1,0},
                             { 0,0,0,1,0},
                             { 0,0,0,1,0},
                             { 0,0,0,0,0} });
        //8
        lsh.Add(new int[,] { { 0,0,0,0,0},
                             { 0,0,1,0,0},
                             { 0,0,1,0,0},
                             { 0,0,0,0,0},
                             { 0,0,0,0,0} });
        //9
        lsh.Add(new int[,] { { 0,0,0,0,0},
                             { 0,0,0,1,0},
                             { 0,0,0,1,0},
                             { 0,1,1,1,0},
                             { 0,0,0,0,0} });
        //10
        lsh.Add(new int[,] { { 0,0,0,0,0},
                             { 0,1,1,1,0},
                             { 0,1,0,0,0},
                             { 0,1,0,0,0},
                             { 0,0,0,0,0} });

        //11
        lsh.Add(new int[,] { { 0,0,0,0,0},
                             { 0,0,1,0,0},
                             { 0,0,1,0,0},
                             { 0,0,1,0,0},
                             { 0,0,1,0,0} });

        //12
        lsh.Add(new int[,] { { 0,0,0,0,0},
                             { 0,0,0,0,0},
                             { 0,1,1,1,1},
                             { 0,0,0,0,0},
                             { 0,0,0,0,0} });

        //13
        lsh.Add(new int[,] { { 0,0,0,0,0},
                             { 0,0,1,0,0},
                             { 0,1,1,0,0},
                             { 0,0,0,0,0},
                             { 0,0,0,0,0} });

        //14
        lsh.Add(new int[,] { { 0,0,0,0,0},
                             { 0,0,0,0,0},
                             { 0,1,1,0,0},
                             { 0,0,1,0,0},
                             { 0,0,0,0,0} });
        //15
        lsh.Add(new int[,] { { 0,0,0,0,0},
                             { 0,0,0,0,0},
                             { 0,0,1,1,0},
                             { 0,0,1,0,0},
                             { 0,0,0,0,0} });

        //16
        lsh.Add(new int[,] { { 0,0,0,0,0},
                             { 0,0,1,0,0},
                             { 0,0,1,1,0},
                             { 0,0,0,0,0},
                             { 0,0,0,0,0} });

        //17
        lsh.Add(new int[,] { { 0,0,0,0,0},
                             { 0,0,0,0,0},
                             { 0,0,1,1,0},
                             { 0,1,1,0,0},
                             { 0,0,0,0,0} });

        //18
        lsh.Add(new int[,] { { 0,0,0,0,0},
                             { 0,0,0,0,0},
                             { 0,1,1,0,0},
                             { 0,0,1,1,0},
                             { 0,0,0,0,0} });

        //19
        lsh.Add(new int[,] { { 0,0,0,0,0},
                             { 0,0,1,0,0},
                             { 0,0,1,1,0},
                             { 0,0,0,1,0},
                             { 0,0,0,0,0} });

        //20
        lsh.Add(new int[,] { { 0,0,0,0,0},
                             { 0,0,1,0,0},
                             { 0,1,1,0,0},
                             { 0,1,0,0,0},
                             { 0,0,0,0,0} });

        //21
        lsh.Add(new int[,] { { 0,0,0,0,0},
                             { 0,1,0,0,0},
                             { 0,1,1,1,0},
                             { 0,0,0,0,0},
                             { 0,0,0,0,0} });

        //22
        lsh.Add(new int[,] { { 0,0,0,0,0},
                             { 0,0,0,0,0},
                             { 0,1,1,1,0},
                             { 0,1,0,0,0},
                             { 0,0,0,0,0} });

        //23
        lsh.Add(new int[,] { { 0,0,0,0,0},
                             { 0,0,0,0,0},
                             { 0,1,1,1,0},
                             { 0,0,0,1,0},
                             { 0,0,0,0,0} });

        //24
        lsh.Add(new int[,] { { 0,0,0,0,0},
                             { 0,0,0,1,0},
                             { 0,1,1,1,0},
                             { 0,0,0,0,0},
                             { 0,0,0,0,0} });


        //25
        lsh.Add(new int[,] { { 0,0,0,0,0},
                             { 0,1,1,1,0},
                             { 0,1,1,1,0},
                             { 0,1,1,1,0},
                             { 0,0,0,0,0} });


        //26
        lsh.Add(new int[,] { { 0,0,0,0,0},
                             { 0,0,1,0,0},
                             { 0,1,1,1,0},
                             { 0,0,0,0,0},
                             { 0,0,0,0,0} });


        //27
        lsh.Add(new int[,] { { 0,0,0,0,0},
                             { 0,0,0,0,0},
                             { 0,1,1,1,0},
                             { 0,0,1,0,0},
                             { 0,0,0,0,0} });


        //28
        lsh.Add(new int[,] { { 0,0,0,0,0},
                             { 0,0,1,0,0},
                             { 0,0,1,1,0},
                             { 0,0,1,0,0},
                             { 0,0,0,0,0} });


        //29
        lsh.Add(new int[,] { { 0,0,0,0,0},
                             { 0,0,1,0,0},
                             { 0,1,1,0,0},
                             { 0,0,1,0,0},
                             { 0,0,0,0,0} });


        //30
        lsh.Add(new int[,] { { 0,0,1,0,0},
                             { 0,0,1,0,0},
                             { 0,0,1,0,0},
                             { 0,0,1,0,0},
                             { 0,0,1,0,0} });

        //31
        lsh.Add(new int[,] { { 0,0,0,0,0},
                             { 0,0,0,0,0},
                             { 1,1,1,1,1},
                             { 0,0,0,0,0},
                             { 0,0,0,0,0} });

        return lsh;

    }



    public void GetRandomShapeWave()
    {
        float x = 0;
        int counterX = 7;
        int sum = 0;


        for (int i = 0; i < 1000; i++)
        {
            counterX++;
            if (counterX == 7)
            {
                counterX = 0;
                x += 9;
                sum = Random.Range(2, 11);
                Debug.Log(sum + 9);
            }
            else
            {
                sum = Random.Range(4, 16);
                Debug.Log(sum);
            }


            x += sum;
        }
    }
}
